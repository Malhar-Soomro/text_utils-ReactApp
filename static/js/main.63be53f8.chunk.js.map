{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","darkMode","href","title","type","id","onClick","toggleMode","htmlFor","defaultProps","TextForm","useState","text","setText","counter","textLength","split","map","currentValue","length","noOfWords","Math","min","apply","console","log","style","color","heading","rows","value","onChange","event","target","backgroundColor","btnColor","newText","toUpperCase","showAlert","toLowerCase","arrText","lower","charAt","slice","join","Alert","alert","role","message","App","setAlert","setTimeout","setBtnColor","setDarkMode","greenMode","setGreenMode","toggleGreenMode","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63be53f8.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n// import { a } from 'react-router-dom';\r\n\r\nfunction Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.darkMode} bg-${props.darkMode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n                <buthrefn className=\"navbar-hrefggler\" type=\"buthrefn\" data-bs-hrefggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"hrefggle navigation\">\r\n                    <span className=\"navbar-hrefggler-icon\"></span>\r\n                </buthrefn>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auhref mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            {/* <a className=\"nav-link\" href=\"/about\">About</a> */}\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <buthrefn className=\"btn btn-outline-success\" type=\"submit\">Search</buthrefn>\r\n                    </form> */}\r\n\r\n                    {/* <div className={`form-check form-switch text-${props.greenMode === \"blue\" ? \"black\" : \"white\"}`} style={{ \"marginRight\": \"15px\" }}>\r\n                        <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.hrefggleGreenMode} />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable GreenMode</label>\r\n                    </div> */}\r\n                </div>\r\n                <div className={`form-check form-switch text-${props.darkMode === \"light\" ? \"black\" : \"white\"}`} >\r\n                    <input className=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                </div>\r\n            </div>\r\n        </nav >\r\n    );\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: \"set title here\"\r\n}\r\nexport default Navbar;\r\n","import React, { useState } from 'react';\r\n\r\nfunction TextForm(props) {\r\n    const intoUpperCase = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\", \"converted into UPPERCASE\");\r\n    }\r\n    const intoLowerCase = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.showAlert(\"success\", \"converted into lowercase\");\r\n    }\r\n\r\n    const intoTitleCase = () => {\r\n        let arrText = text.split(\" \").map((currentValue) => {\r\n            let lower = currentValue.toLowerCase();\r\n            let newText = lower.charAt(0).toUpperCase() + lower.slice(1);\r\n            return newText;\r\n        });\r\n        setText(arrText.join(\" \"));\r\n        props.showAlert(\"success\", \"capitalized\");\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n\r\n    const [text, setText] = useState(\"\");\r\n    let counter = 0;\r\n    let textLength = text.split(\" \").map((currentValue) => {\r\n        if (currentValue === \"\") {\r\n            counter = counter + 1;\r\n        }\r\n        return text.split(\" \").length - counter;\r\n    });\r\n    const noOfWords = Math.min.apply(null, textLength);\r\n\r\n    console.log(text.split(\" \").length);\r\n    return (\r\n        <>\r\n            <div className=\"container my-3\">\r\n                <h3 style={{ color: props.darkMode === \"dark\" ? \"white\" : \"black\" }} >{props.heading}</h3>\r\n                <div className=\"mb-3\" >\r\n                    <textarea className=\"form-control\" id=\"myBox\" rows=\"6\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.darkMode === \"dark\" ? \"rgb(9 40 73)\" : \"white\", color: props.darkMode === \"dark\" ? \"white\" : \"black\" }}></textarea>\r\n                </div>\r\n                <button className={`btn btn-${props.btnColor}`} onClick={intoUpperCase}>UPPERCASE</button>\r\n                <button className={`btn btn-${props.btnColor} mx-2`} onClick={intoLowerCase}>lowercase</button>\r\n                <button className={`btn btn-${props.btnColor}`} onClick={intoTitleCase}>Title Case</button>\r\n            </div>\r\n            <div className=\"container\" style={{ color: props.darkMode === \"dark\" ? \"white\" : \"black\" }}>\r\n                <h2>Text Summary</h2>\r\n                <p>{noOfWords} words and {text.length} characters</p>\r\n                <p>{0.008 * noOfWords} minutes read</p>\r\n                <h3>Previews</h3>\r\n                <p>{text.length === 0 ? \"Write something in text box above to preview\" : text}</p>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\nexport default TextForm;\r\n","import React from 'react';\n\nfunction Alert(props) {\n    return (\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n            <strong>\n                {props.alert.message}\n            </strong>\n        </div>\n    );\n}\n\nexport default Alert;\n","import './App.css';\n// import About from './components/About';\nimport Navbar from \"./components/Navbar\";\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [alert, setAlert] = useState(null);\n  const showAlert = (type, message) => {\n    setAlert({\n      type: type,\n      message: message\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  const [btnColor, setBtnColor] = useState(\"primary\");\n  const [darkMode, setDarkMode] = useState(\"light\");\n  const toggleDarkMode = () => {\n    if (darkMode === \"light\") {\n      setDarkMode(\"dark\");\n      document.body.style.backgroundColor = \"rgb(9 40 73)\";\n      showAlert(\"success\", \"Dark Mode Enabled\");\n    }\n    else {\n      setDarkMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"success\", \"Light Mode Enabled\");\n    }\n  }\n\n  const [greenMode, setGreenMode] = useState(\"blue\");\n  const toggleGreenMode = () => {\n    if (greenMode === \"blue\") {\n      setGreenMode(\"green\");\n      document.body.style.backgroundColor = \"#306830\";\n      showAlert(\"success\", \"Green Mode Enabled\");\n      setDarkMode(\"dark\");\n      setBtnColor(\"success\");\n    }\n    else {\n      setGreenMode(\"blue\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"success\", \"Light Mode Enabled\");\n      setDarkMode(\"light\");\n      setBtnColor(\"primary\");\n    }\n  }\n  return (\n    // <Router>\n    <>\n      <Navbar title=\"TextUtils\" darkMode={darkMode} toggleGreenMode={toggleGreenMode} toggleMode={toggleDarkMode} greenMode={greenMode} />\n      <Alert alert={alert} />\n      {/* <Switch> */}\n      {/* <Route exact path=\"/about\"> */}\n      {/* <About />/ */}\n      {/* </Route> */}\n      {/* <Route exact path=\"/\"> */}\n      <TextForm heading=\"Enter text here to analyze\" darkMode={darkMode} showAlert={showAlert} btnColor={btnColor} />\n      {/* </Route> */}\n      {/* </Switch> */}\n      {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}